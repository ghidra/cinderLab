#version 420 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_variable_group_size : enable
#extension GL_ARB_shader_atomic_counters : enable

#include "noiselib.glsl"

uniform mat4 uModelMatrix;//model matrix for incoming geo

uniform uint uBufferSize;//this is the size of the geos vert buffer, so we make sure to stop
//uniform uint uTriangleVertOffset;//this comein with each geo... so we can offset the vertex copy to triangle buffer
uniform float uVoxelResolution;
uniform float uTime;
uniform float uSceneScale;
//take in the camera position for culling
//uniform vec3 uCameraPosition
//uniform vec3 uCameraDirection

struct Voxel
{
  //ec3 P;  //position
  vec3 N;//normal
  vec3 Cd; //color
};
struct Geo{
	vec3 P; //position
    vec3 N; //normal
    vec4 uv; //2 uv channels
    vec3 Cd; //color diffuse
    vec3 Cs; //color spec
    float Rd; //Reflectivity diffuse
    float Rs; //reflectivity specular
    float e; //emisivity
    float t; //tranparency
    //vec4 lit;///lighting result
};

layout (binding = 0, offset = 0) uniform atomic_uint TriCounter;

layout( std430, binding = 0 ) buffer VoxelBuffer
{
    Voxel voxels[];
};
layout( std430, binding = 1 )  buffer TriBuffer
{
    Geo triangles[];
};
layout( std430, binding = 2 )  buffer GeoBuffer
{
    Geo mesh[];
};

layout( local_size_x = WG_SIZE_X, local_size_y = WG_SIZE_Y, local_size_z = WG_SIZE_Z ) in;

////////////HASH
//https://www.shadertoy.com/view/XlXcW4
const uint k = 1103515245U;  // GLIB C
//const uint k = 134775813U;   // Delphi and Turbo Pascal
//const uint k = 20170906U;    // Today's date (use three days ago's dateif you want a prime)
//const uint k = 1664525U;     // Numerical Recipes

vec3 hash( uvec3 x )
{
    x = ((x>>8U)^x.yzx)*k;
    x = ((x>>8U)^x.yzx)*k;
    x = ((x>>8U)^x.yzx)*k;
    
    return vec3(x)*(1.0/float(0xffffffffU));
}
//////////////////////////
//https://hbfs.wordpress.com/2010/10/05/random-points-in-a-triangle-generating-random-sequences-ii/
Geo pInTriangle(Geo a, Geo b, Geo c, float s)
{
	vec2 uv = abs(vec2( SimplexPerlin2D(vec2(s*2.464,s+44.56)), SimplexPerlin2D(vec2(s*9.664,s*-54.3+444.56)) ));
	Geo v;
	v.P = mix(mix(a.P,b.P,uv.x),c.P,uv.y)*uSceneScale;
	v.N = normalize(mix(mix(a.N,b.N,uv.x),c.N,uv.y));
	v.uv = mix(mix(a.uv,b.uv,uv.x),c.uv,uv.y);
	v.Cd =mix(mix(a.Cd,b.Cd,uv.x),c.Cd,uv.y);
	v.Cs = mix(mix(a.Cs,b.Cs,uv.x),c.Cs,uv.y);
	v.Rd = mix(mix(a.Rd,b.Rd,uv.x),c.Rd,uv.y);
	v.Rs = mix(mix(a.Rs,b.Rs,uv.x),c.Rs,uv.y);
	v.e = mix(mix(a.e,b.e,uv.x),c.e,uv.y);
	v.t = mix(mix(a.t,b.t,uv.x),c.t,uv.y);
	return v; 
}

////////////////////////////////////

float attenuate(float dist){ dist *= 1.1f; return 1.0f / (1.0  +  dist * dist); }

vec3 calculatePointLight(vec3 lightposition, vec3 lightcolor, vec3 worldposiition, vec3 normal){
	const vec3 direction = normalize(lightposition - worldposiition);
	const float distanceToLight = distance(lightposition, worldposiition);
	const float attenuation = attenuate(distanceToLight);
	const float d = max(dot(normalize(normal), direction), 0.0f);
	return d  * attenuation * lightcolor;
};

vec3 scaleAndBias(vec3 p) { return 0.5f * p + vec3(0.5f); }
bool isInsideCube(const vec3 p) { return p.x < uVoxelResolution && p.y < uVoxelResolution && p.z< uVoxelResolution && p.x > 0 &&  p.y > 0 && p.z > 0 ; }

/////////////////////////////////////

void main(){
	uint gid = gl_GlobalInvocationID.x;	// The .y and .z are both 1 in this case.
  	if( gid >= uBufferSize )
    	return;

    Geo v0 = mesh[gid*3];
    Geo v1 = mesh[(gid*3)+1];
    Geo v2 = mesh[(gid*3)+2];

    //float sceneScale = 0.2f;//scale the scene prior to fitting voxel grid

    //get the point in the right space
    v0.P = (uModelMatrix*vec4(v0.P,1)).xyz;//*uSceneScale;
    v1.P = (uModelMatrix*vec4(v1.P,1)).xyz;//*uSceneScale;
    v2.P = (uModelMatrix*vec4(v2.P,1)).xyz;//*uSceneScale;
    v0.N = normalize((uModelMatrix*vec4(v0.N,0)).xyz);
    v1.N = normalize((uModelMatrix*vec4(v1.N,0)).xyz);
    v2.N = normalize((uModelMatrix*vec4(v2.N,0)).xyz);

    //lets now add the triangle to the triangle buffer
    //uint tri = uint(triangles[0].t);
    //triangles[ (tri+1)*3 ] = v0;
    //triangles[ ((tri+1)*3)+1 ] = v1;
    //triangles[ ((tri+1)*3)+2 ] = v2;
    //triangles[ 0 ].t+=1.0;//increment the triangle count
    uint tri = atomicCounterIncrement(TriCounter);//use the atomic counter to get in the id of the triangle
    triangles[ tri*3 ] = v0;
    triangles[ (tri*3)+1 ] = v1;
    triangles[ (tri*3)+2 ] = v2;

    //triangles[ (gid*3)+uTriangleVertOffset ] = v0;
    //triangles[ ((gid*3)+1)+uTriangleVertOffset ] = v1;
    //triangles[ ((gid*3)+2)+uTriangleVertOffset ] = v2;

    //vec3 voxOffset = vec3( round(uVoxelSize*0.5) );
   
    //vec3 vox0 = round((v0.P*sceneScale)+0.5f)*uVoxelResolution; ///add 0.5 to move from -0.5 through 0.5 to 0 through 1
    //vec3 vox1 = round((v1.P*sceneScale)+0.5f)*uVoxelResolution; ///mult to get it into the voxel space for finding the flat 1d id
    //vec3 vox2 = round((v2.P*sceneScale)+0.5f)*uVoxelResolution;

    //int ind0 = int(vox0.x+(vox0.z*uVoxelResolution)+(vox0.y*uVoxelResolution*uVoxelResolution));//get the flat id
    //int ind1 = int(vox1.x+(vox1.z*uVoxelResolution)+(vox1.y*uVoxelResolution*uVoxelResolution));
    //int ind2 = int(vox2.x+(vox2.z*uVoxelResolution)+(vox2.y*uVoxelResolution*uVoxelResolution));

    //voxels[ind0].Cd = vec3(1.0f);//v0.Cd;
    //voxels[ind1].Cd = vec3(1.0f);//v1.Cd;
    //voxels[ind2].Cd = vec3(1.0f);//v2.Cd;

    ///lets make a hand full of points per triangle
    for (int i=0; i<32; i++)
    {
    	Geo v = pInTriangle( v0,v1,v2,float(i) );
    	vec3 vox = round( ((v.P)+0.5f)*uVoxelResolution );//here we are in 0-voxel resolution space

    	vec3 color = vec3(0.0f);
		if(!isInsideCube(vox)) return;

		// Calculate diffuse lighting fragment contribution.
		color += calculatePointLight( vec3(0.3,0.4,0.2),vec3(1,1,1) ,v.P,v.N);
		vec3 spec = v.Rs * v.Cs;
		vec3 diff = v.Rd * v.Cd;
		color = (diff + spec) * color + clamp(v.e, 0, 1) * v.Cd;

		//float alpha = pow(1 - v.t, 4); 

		///this is the look up into the 1d array
    	int ind = int(vox.x+(vox.z*uVoxelResolution)+(vox.y*uVoxelResolution*uVoxelResolution));
    	
    	voxels[ind].Cd = vec3(1.0f);//color;//(v.N+1.0)*0.5;//vec3(1.0f);//v2.Cd;
    	voxels[ind].N = v.N;
    }
    
}