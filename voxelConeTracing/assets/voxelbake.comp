#version 420 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_variable_group_size : enable

#include "dat.glsl"

uniform uint uBufferSize;//this is the size of the geos vert buffer, so we make sure to stop
uniform float uVoxelResolution;

layout( std430, binding = 0 ) buffer VoxelBuffer
{
    Voxel voxels[];
};

layout (binding=1, RGBA8) writeonly uniform image3D tex3D;

layout( local_size_x = WG_SIZE_X, local_size_y = WG_SIZE_Y, local_size_z = WG_SIZE_Z ) in;


void main(){
	uint gid = gl_GlobalInvocationID.x;	// The .y and .z are both 1 in this case.
  	if( gid >= uBufferSize )
    	return;

    //get the positional id to write in
    float x = mod(gid,uVoxelResolution);//x
    float y = mod(floor(gid/uVoxelResolution),uVoxelResolution);//y
    float z = floor(floor(gid/uVoxelResolution)/uVoxelResolution);

    imageStore(tex3D, ivec3(x,y,z), vec4(voxels[gid].Cd,voxels[gid].Alpha));//;//(v.N+1.0)*0.5;//vec3(1.0f);//v2.Cd;
    
}