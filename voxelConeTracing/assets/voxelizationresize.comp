#version 420 core
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable
#extension GL_ARB_compute_variable_group_size : enable

#include "dat.glsl"

uniform float uVoxelResolution;
uniform float uBufferSize;
uniform uint uStep;//starts at 0, never more than 3..the resize step... forst step uses main buffer, second step uses resized buffer

/*struct Voxel
{
  vec3 N;//normal
  vec3 Cd; //color
};*/

layout( std430, binding = 0 ) readonly buffer VoxelBuffer
{
    Voxel voxels[];
};
layout( std430, binding = 1 )  buffer VoxelResizedBuffer
{
    Voxel voxelsresized[];
};

layout( local_size_x = WG_SIZE_X, local_size_y = WG_SIZE_Y, local_size_z = WG_SIZE_Z ) in;

////////////
//this gives us the offset we want for the rez we are reading or writing
uint getIdOffset(uint step)
{
  uint r1 = uint( pow( uVoxelResolution/2, 3 ) ) * uint(min(max(step,0),1));
  uint r2 = uint( pow( r1/2, 3 ) ) * uint( min(max(step-1, 0 ),1) );
  uint r3 = uint( pow( r2/2, 3 ) ) * uint( min(max(step-2, 0 ),1) );
  return r1+r2+r3;
}
Voxel voxelDownSample(uint i)
{
  Voxel v;

  uint fr = uint(uVoxelResolution)/uint(pow(2,uStep));//pow to 0 is 1//divisor for fullres... (1,2,4,8)
  uint hr = fr/2;//halfres
  uint sq = fr*fr;//squared
  uint saa = i + ( (i/hr)*(hr+fr) ) + ( uint(mod(i,hr)) ) + ( (i/(hr*hr))*sq );//first sample id
  uint sab = saa + fr;
  uint sac = saa + sq;
  uint sad = sac + fr;

  if(uStep<1)
  {
    //first time through
    Voxel v0 = voxels[saa];
    Voxel v1 = voxels[saa+1];
    Voxel v2 = voxels[sab];
    Voxel v3 = voxels[sab+1];
    Voxel v4 = voxels[sac];
    Voxel v5 = voxels[sac+1];
    Voxel v6 = voxels[sad];
    Voxel v7 = voxels[sad+1];

    v.Cd = vec3(v0.Cd+v1.Cd+v2.Cd+v3.Cd+v4.Cd+v5.Cd+v6.Cd+v7.Cd)/8.0f;
    v.N = vec3(v0.N+v1.N+v2.N+v3.N+v4.N+v5.N+v6.N+v7.N)/8.0f;
  }
  else
  {

    //every other time
    //uint r1 = uint( pow( uVoxelResolution/2, 3 ) );
    //uint r2 = uint( pow( r1/2, 3 ) ) * uint( max(uStep-1, 0 ) );
    //uint r3 = uint( pow( r2/2, 3 ) ) * uint( max(uStep-2, 0 ) );
    uint offset = getIdOffset(uStep-1);//r1+r2+r3;
    
    Voxel v0 = voxelsresized[saa+offset];
    Voxel v1 = voxelsresized[saa+1+offset];
    Voxel v2 = voxelsresized[sab+offset];
    Voxel v3 = voxelsresized[sab+1+offset];
    Voxel v4 = voxelsresized[sac+offset];
    Voxel v5 = voxelsresized[sac+1+offset];
    Voxel v6 = voxelsresized[sad+offset];
    Voxel v7 = voxelsresized[sad+1+offset];

    v.Cd = vec3(v0.Cd+v1.Cd+v2.Cd+v3.Cd+v4.Cd+v5.Cd+v6.Cd+v7.Cd)/8.0f;
    v.N = vec3(v0.N+v1.N+v2.N+v3.N+v4.N+v5.N+v6.N+v7.N)/8.0f;
  }

  return v;

}
//////////////////////////
//
////////////////////////////////////
/////////////////////////////////////

void main(){
	uint gid = gl_GlobalInvocationID.x;	// The .y and .z are both 1 in this case.
  	if( gid >= uBufferSize )
    	return;

    voxelsresized[ gid+getIdOffset(uStep) ] = voxelDownSample(gid);
  
}